from telebot import types
from Database import Database
import Entities
from Handlers.landlord import landlord_menu
from Handlers.tenant import tenant_menu
from Markups import Markup
from utils import edit_or_send_message

db = Database()

def handle_start(bot, message):
    user = db.get_user(message.chat.id)

    if user is None:
        markup = Markup.role_markup()
        welcome_text = """
üåü *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ RentMaster!* üåü

–Ø –ø–æ–º–æ–≥—É –≤–∞–º:
‚Ä¢ üè† *–°–¥–∞—Ç—å* –∫–≤–∞—Ä—Ç–∏—Ä—É –±—ã—Å—Ç—Ä–æ –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ
‚Ä¢ üîç *–ù–∞–π—Ç–∏* –∏–¥–µ–∞–ª—å–Ω–æ–µ –∂–∏–ª—å—ë –ø–æ –≤–∞—à–∏–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º

–í—ã —É –Ω–∞—Å –≤–ø–µ—Ä–≤—ã–µ? –í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ—é —Ä–æ–ª—å:
        """
        bot.send_message(message.chat.id,
                         welcome_text,
                         parse_mode='Markdown',
                         reply_markup=markup)
    else:
        if user.role == 'landlord':
            landlord_menu(bot, message)
        elif user.role == 'tenant':
            tenant_menu(bot, message)

def register_user(bot, callback):
    role = callback.data.split('_')[1]
    user = Entities.User.from_callback(callback, role)
    db.add_user(user)


    handle_start(bot, callback.message)

def sub(bot, callback):
    sub_step = callback.data.split('_')[1]
    back = 'go_home'
    markup = None

    if sub_step == 'price':
        text = """
üíé *–ü—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞* üíé

–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –ø–æ–¥–ø–∏—Å–∫–∏:
‚Ä¢ üî• –ì–æ—Ä—è—á–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –Ω–∞ 24 —á–∞—Å–∞ —Ä–∞–Ω—å—à–µ
‚Ä¢ üëë –í—ã–¥–µ–ª–µ–Ω–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –≤ –ø–æ–∏—Å–∫–µ
‚Ä¢ üõ°Ô∏è –ì–∞—Ä–∞–Ω—Ç–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —Å–¥–µ–ª–∫–∏

*–£—Å–ª–æ–≤–∏—è:*
–ù–∞–∂–∏–º–∞—è –∫–Ω–æ–ø–∫—É "–î–∞–ª–µ–µ ‚ñ∂Ô∏è", –≤—ã —Å–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å —Å —É—Å–ª–æ–≤–∏—è–º–∏ –æ–ø–ª–∞—Ç—ã –≤ —Ä–∞–∑–º–µ—Ä–µ –æ–¥–Ω–æ–≥–æ –º–∏–ª–ª–∏–æ–Ω–∞ —Ä—É–±–ª–µ–π.
        """
        next = "sub_organs"

    elif sub_step == 'organs':
        text = """

–ü—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞ –≤–∫–ª—é—á–∞–µ—Ç:
‚Ä¢ üìÖ 30 –¥–Ω–µ–π premium-–¥–æ—Å—Ç—É–ø–∞
‚Ä¢ üîî –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
‚Ä¢ üí¨ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞

ü´Ä *–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è*
–í—Å–µ –ø–∞—Ä–Ω—ã–µ –æ—Ä–≥–∞–Ω—ã –±—É–¥—É—Ç –ø–µ—Ä–µ–¥–∞–Ω—ã –≤ –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —Ü–µ–Ω—Ç—Ä "–ò —Ç–∞–∫ —Å–æ–π–¥—ë—Ç".

–ù–∞–∂–º–∏—Ç–µ "–î–∞–ª–µ–µ ‚ñ∂Ô∏è" —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å
        """
        next = "sub_work"

    elif sub_step == 'work':
        text = """
üë®‚Äçüíª *–ü–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–≥!*

–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è –¥–ª—è:
‚Ä¢ üè¢ –ö–æ–º–ø–∞–Ω–∏–π
‚Ä¢ ü§ù –ü–∞—Ä—Ç–Ω–µ—Ä–æ–≤
‚Ä¢ üë• –†–∏–µ–ª—Ç–æ—Ä–æ–≤

** –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è **

–ü–æ–º–∏–º–æ –≤—Å–µ–≥–æ –≤—ã—à–µ–ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–Ω–æ–≥–æ –í—ã —Ç–∞–∫ –∂–µ –æ–±—è–∑—É–µ—Ç–µ—Å—å –≤–∑—è—Ç—å –∞–≤—Ç–æ—Ä–∞ –¥–∞–Ω–Ω–æ–≥–æ –±–æ—Ç–∞ –≤ —Å–≤–æ—é –∫–æ–º–∞–Ω–¥—É.

–ù–∞–∂–º–∏—Ç–µ "–î–∞–ª–µ–µ ‚ñ∂Ô∏è" –¥–ª—è –¥–µ—Ç–∞–ª–µ–π
        """
        next = "sub_job"
        back = 'sub_rely'

    elif sub_step == 'job':
        text = """
‚ú® *–°–ø–∞—Å–∏–±–æ –∑–∞ –∏–Ω—Ç–µ—Ä–µ—Å!* ‚ú®

–ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –¥–ª—è:
‚Ä¢ üéÅ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
‚Ä¢ ‚ùì –û—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã
‚Ä¢ üíº –û–±—Å—É–∂–¥–µ–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–∞

–ñ–¥–µ–º –≤–∞—Å —Å—Ä–µ–¥–∏ –ø—Ä–µ–º–∏—É–º-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π!
        """
        markup = Markup.go_home_markup()
    elif sub_step == 'rely':
        text = """
–°–æ–≥–ª–∞—Å–Ω—ã, —Å –ø–æ—Å–ª–µ–¥–Ω–µ–µ –±—ã–ª–æ —É–∂–µ —á–µ—Ä–µ—Å—á—É—Ä, –Ω—É–∂–Ω–æ –±—ã–ª–æ –ø–æ–¥—Å–µ–∫–∞—Ç—å —Ä–∞–Ω—å—à–µ üòî
        """
        markup = Markup.go_home_markup()

    if markup is None:
        markup = Markup.next_or_back(next, back)

    edit_or_send_message(bot, callback.message, text, markup)

def go_home(bot, callback):
    handle_start(bot, callback.message)

def register_common_handlers(bot):
    bot.message_handler(commands=['start'])(lambda msg: handle_start(bot, msg))
    (bot.callback_query_handler(func=lambda callback: callback.data.startswith('role'))
     (lambda call: register_user(bot, call)))
    (bot.callback_query_handler(func=lambda callback: callback.data.startswith('sub'))
     (lambda call: sub(bot, call)))
    (bot.callback_query_handler(lambda clb: clb.data == 'go_home')
     (lambda message: go_home(bot, message)))
