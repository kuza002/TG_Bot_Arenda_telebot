from Database import Database
from Entities import Ad
import Handlers
from Markups import Markup
from utils import edit_or_send_message, log_event

db = Database()
user_data = {}


def landlord_menu(bot, message):
    log_event('Entered to landlord_menu', message)
    user_id = message.chat.id
    ad = db.get_ad(user_id)

    if ad is None:
        text = """
üì≠ *–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–π*

–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –∏ –Ω–∞—á–Ω–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –æ—Ç –∞—Ä–µ–Ω–¥–∞—Ç–æ—Ä–æ–≤!
"""
    else:
        text = f"""
üè† *–í–∞—à–µ —Ç–µ–∫—É—â–µ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ:*

üìç –†–∞–π–æ–Ω: *{ad.district}*
üíµ –¶–µ–Ω–∞: *{ad.price} ‚ÇΩ/–º–µ—Å*
üè° –ê–¥—Ä–µ—Å: *{ad.address}*

‚ú® –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π –æ—Ñ–æ—Ä–º–∏—Ç–µ *–ü—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫—É*
"""

    markup = Markup.landlord_markup()
    edit_or_send_message(bot, message, text, markup, parse_mode='Markdown')


def district_choice(bot, callback):
    log_event('Entered to district_choice', callback)
    ad = db.get_ad(callback.message.chat.id)

    if ad is not None:
        text = """
‚ö†Ô∏è *–õ–∏–º–∏—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏–π –∏—Å—á–µ—Ä–ø–∞–Ω*

–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ:
1. –£–¥–∞–ª–∏—Ç–µ —Ç–µ–∫—É—â–µ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ
2. –û—Ñ–æ—Ä–º–∏—Ç–µ *–ü—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫—É* –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤—ã—Ö
"""
        markup = Markup.go_home_markup()
        edit_or_send_message(bot, callback.message, text, markup, parse_mode='Markdown')
    else:
        text = """
üèô *–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–π–æ–Ω*

–£–∫–∞–∂–∏—Ç–µ —Ä–∞–π–æ–Ω, –≥–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤–∞—à–∞ –∫–≤–∞—Ä—Ç–∏—Ä–∞:
"""
        markup = Markup.district_markup()
        edit_or_send_message(bot, callback.message, text, markup, parse_mode='Markdown')


def price_choice(bot, callback):
    log_event('Entered to price_choice', callback)
    def save_price(message):
        try:
            price = int(message.text)
            if price <= 0:
                raise ValueError

            user_data[message.chat.id] = {
                'district': callback.data,
                'price': price
            }
            address_choice(bot, message)
        except ValueError:
            error_text = """
‚ùå *–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞*

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É –∞—Ä–µ–Ω–¥—ã (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã):
–ü—Ä–∏–º–µ—Ä: *35000*
"""
            edit_or_send_message(bot, message, error_text, parse_mode='Markdown')
            bot.register_next_step_handler(message, save_price)

    text = """
üíµ *–£–∫–∞–∂–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –∞—Ä–µ–Ω–¥—ã*

–í–≤–µ–¥–∏—Ç–µ –º–µ—Å—è—á–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –∞—Ä–µ–Ω–¥—ã (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã):
–ü—Ä–∏–º–µ—Ä: *35000*
"""
    user_data[callback.message.chat.id] = {'district': callback.data}
    edit_or_send_message(bot, callback.message, text, parse_mode='Markdown')
    bot.register_next_step_handler(callback.message, save_price)


def address_choice(bot, message):
    log_event('Entered to address_choice', message)
    def save_address(message):
        user_id = message.chat.id
        ad_data = user_data[user_id]

        ad = Ad(
            user_id,
            ad_data['district'],
            ad_data['price'],
            message.text
        )

        db.add_ad(ad)

        success_text = f"""
üéâ *–û–±—ä—è–≤–ª–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ!*

–¢–µ–ø–µ—Ä—å –≤–∞—à–∞ –∫–≤–∞—Ä—Ç–∏—Ä–∞ –≤ —Ä–∞–π–æ–Ω–µ *{ad.district}* 
–ø–æ —Ü–µ–Ω–µ *{ad.price} ‚ÇΩ/–º–µ—Å* –±—É–¥–µ—Ç –≤–∏–¥–Ω–∞ –∞—Ä–µ–Ω–¥–∞—Ç–æ—Ä–∞–º.
"""
        edit_or_send_message(bot, message, success_text, parse_mode='Markdown')
        landlord_menu(bot, message)

    text = """
üè° *–£–∫–∞–∂–∏—Ç–µ —Ç–æ—á–Ω—ã–π –∞–¥—Ä–µ—Å*

–ù–∞–ø–∏—à–∏—Ç–µ –ø–æ–ª–Ω—ã–π –∞–¥—Ä–µ—Å –∫–≤–∞—Ä—Ç–∏—Ä—ã (—É–ª–∏—Ü–∞, –¥–æ–º, –∫–≤–∞—Ä—Ç–∏—Ä–∞):
–ü—Ä–∏–º–µ—Ä: *—É–ª. –ü—Ä–∏–º–µ—Ä–Ω–∞—è, –¥. 10, –∫–≤. 25*
"""
    edit_or_send_message(bot, message, text, parse_mode='Markdown')
    bot.register_next_step_handler(message, save_address)


def delete_ad(bot, callback):
    log_event('Entered to delete_ad', callback)
    db.delete_ad(callback.message.chat.id)

    text = """
üóë *–û–±—ä—è–≤–ª–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ*

–í—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –∫–æ–≥–¥–∞ –∑–∞—Ö–æ—Ç–∏—Ç–µ.
"""
    edit_or_send_message(bot, callback.message, text, parse_mode='Markdown')
    landlord_menu(bot, callback.message)


def go_tenant(bot, callback):
    log_event('Entered to go_tenant', callback)
    user = db.get_user(callback.message.chat.id)
    db.delete_user(user.id)

    user.role = 'tenant'
    db.add_user(user)

    Handlers.tenant.tenant_menu(bot, callback.message)


def register_landlord_handlers(bot):
    (bot.message_handler(commands=['landlord_menu'], bot=bot)
     (lambda message: landlord_menu(bot, message)))

    (bot.callback_query_handler(lambda clb: clb.data == 'ad_create')
     (lambda message: district_choice(bot, message)))

    (bot.callback_query_handler(lambda clb: clb.data in Ad.ALL_DISTRICTS)
     (lambda message: price_choice(bot, message)))

    (bot.callback_query_handler(lambda clb: clb.data == 'delete_ad')
     (lambda message: delete_ad(bot, message)))

    (bot.callback_query_handler(lambda clb: clb.data == 'go_tenant')
     (lambda message: go_tenant(bot, message)))