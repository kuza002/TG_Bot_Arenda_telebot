from telebot import types
import Entities


class Markup:

    @staticmethod
    def role_markup():
        markup = types.InlineKeyboardMarkup()
        landlord_btn = types.InlineKeyboardButton('üè† –°–¥–∞—Ç—å –∫–≤–∞—Ä—Ç–∏—Ä—É (–ê—Ä–µ–Ω–¥–æ–¥–∞—Ç–µ–ª—å)',
                                                  callback_data='role_landlord')
        tenant_btn = types.InlineKeyboardButton('üîç –°–Ω—è—Ç—å –∫–≤–∞—Ä—Ç–∏—Ä—É (–ê—Ä–µ–Ω–¥–∞—Ç–æ—Ä)',
                                                callback_data='role_tenant')
        markup.row(landlord_btn)
        markup.row(tenant_btn)
        return markup

    @staticmethod
    def landlord_markup():
        markup = types.InlineKeyboardMarkup()
        create_btn = types.InlineKeyboardButton("üìù –°–æ–∑–¥–∞—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ",
                                                callback_data='ad_create')
        del_btn = types.InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –æ–±—ä—è–≤–ª–µ–Ω–∏–µ",
                                             callback_data='delete_ad')
        change_role_btn = types.InlineKeyboardButton("üîÑ –°–º–µ–Ω–∏—Ç—å –Ω–∞ –∞—Ä–µ–Ω–¥–∞—Ç–æ—Ä–∞",
                                                     callback_data='go_tenant')
        sub_btn = types.InlineKeyboardButton('üíé –ü—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞',
                                             callback_data='sub_price')

        markup.row(create_btn)
        markup.row(del_btn)
        markup.row(change_role_btn, sub_btn)
        return markup

    @staticmethod
    def district_markup():
        markup = types.InlineKeyboardMarkup()
        districts = Entities.Ad.ALL_DISTRICTS

        for i in range(0, len(districts), 2):
            row = []
            for district in districts[i:i + 2]:
                emoji = 'üèôÔ∏è' if '—Ü–µ–Ω—Ç—Ä' in district.lower() else 'üåÜ'
                btn = types.InlineKeyboardButton(
                    f"{emoji} {district}",
                    callback_data=district
                )
                row.append(btn)
            markup.row(*row)

        return markup

    @staticmethod
    def go_home_markup(callback='go_home'):
        markup = types.InlineKeyboardMarkup()
        markup.add(types.InlineKeyboardButton('‚Ü©Ô∏è –ù–∞–∑–∞–¥', callback_data=callback))
        return markup

    @staticmethod
    def next_or_back(next_callback, back_callback):
        markup = types.InlineKeyboardMarkup()
        markup.row(
            types.InlineKeyboardButton('‚óÄÔ∏è –ù–∞–∑–∞–¥', callback_data=back_callback),
            types.InlineKeyboardButton('–î–∞–ª–µ–µ ‚ñ∂Ô∏è', callback_data=next_callback)
        )
        return markup

    @staticmethod
    def tenant_markup():
        markup = types.InlineKeyboardMarkup()
        markup.row(
            types.InlineKeyboardButton('üîç –ù–∞–π—Ç–∏ –∂–∏–ª—å—ë –ø–æ —Ñ–∏–ª—å—Ç—Ä—É',
                                       callback_data='find_by_filter')
        )
        markup.row(
            types.InlineKeyboardButton('‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä –ø–æ–∏—Å–∫–∞',
                                       callback_data='create_filter')
        )
        markup.row(
            types.InlineKeyboardButton('üîÑ –°—Ç–∞—Ç—å –∞—Ä–µ–Ω–¥–æ–¥–∞—Ç–µ–ª–µ–º',
                                       callback_data='go_landlord'),
            types.InlineKeyboardButton('üíé –ü—Ä–µ–º–∏—É–º',
                                       callback_data='sub_price')
        )
        return markup

    @staticmethod
    def district_checkbox_markup(user_data, user_id):
        keyboard = types.InlineKeyboardMarkup()
        districts = Entities.Ad.ALL_DISTRICTS

        for i in range(0, len(districts), 2):
            row = []
            for district in districts[i:i + 2]:
                emoji = '‚úÖ' if district in user_data['selected_districts'] else 'üîò'
                btn = types.InlineKeyboardButton(
                    f"{emoji} {district}",
                    callback_data=f"checkbox_{district}"
                )
                row.append(btn)
            keyboard.row(*row)

        keyboard.row(
            types.InlineKeyboardButton('üöÄ –ì–æ—Ç–æ–≤–æ', callback_data="checkbox_done")
        )
        return keyboard