import logging

import Entities
from Database import Database
import Handlers
from Entities import Ad
from Markups import Markup
from utils import edit_or_send_message, log_event

users_data = {}
db = Database()


def tenant_menu(bot, message):
    log_event('Entered to tenant_menu', message)

    user_id = message.chat.id
    filter = db.get_filter(user_id)

    if filter is None:
        text = """
üîç *–§–∏–ª—å—Ç—Ä –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω*

–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–æ–∏—Å–∫–∞.
–ù–∞–∂–º–∏—Ç–µ "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä –ø–æ–∏—Å–∫–∞" —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–∏—Å–∫ –∏–¥–µ–∞–ª—å–Ω–æ–≥–æ –∂–∏–ª—å—è!
"""
    else:
        text = f"""
‚öôÔ∏è *–í–∞—à–∏ —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–∏—Å–∫–∞*

üèô *–†–∞–π–æ–Ω—ã:* {", ".join(filter.districts)}
üí∞ *–î–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω:* {filter.min_price} - {filter.max_price} ‚ÇΩ/–º–µ—Å

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É "üîç –ù–∞–π—Ç–∏ –∂–∏–ª—å—ë" –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ –≤–∞—à–∏–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º.
"""

    markup = Markup.tenant_markup()
    edit_or_send_message(bot, message, text, markup, parse_mode='Markdown')


def create_filter(bot, callback):
    log_event('Entered to create_filter', callback)
    user_id = callback.message.chat.id
    db.delete_filter(user_id)

    if user_id not in users_data:
        users_data[user_id] = {'selected_districts': []}

    text = """
üìç *–í—ã–±–æ—Ä —Ä–∞–π–æ–Ω–æ–≤*

–û—Ç–º–µ—Ç—å—Ç–µ –Ω—É–∂–Ω—ã–µ —Ä–∞–π–æ–Ω—ã (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ):
‚úÖ - –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ä–∞–π–æ–Ω
üîò - –¥–æ—Å—Ç—É–ø–Ω—ã–π –¥–ª—è –≤—ã–±–æ—Ä–∞

–ù–∞–∂–º–∏—Ç–µ "üöÄ –ì–æ—Ç–æ–≤–æ" –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è.
"""
    edit_or_send_message(
        bot,
        callback.message,
        text,
        Markup.district_checkbox_markup(users_data[user_id], user_id),
        parse_mode='Markdown'
    )


def checkbox_district_process(bot, callback):
    log_event('Entered to tenant_menu', callback)
    user_id = callback.message.chat.id
    callback_data = callback.data.split('_')[1]

    if callback_data == "done":
        selected = users_data[user_id]['selected_districts']
        if not selected:
            bot.answer_callback_query(callback.id, "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ä–∞–π–æ–Ω!")
        else:
            text = f"""
‚úÖ *–í—ã–±—Ä–∞–Ω–Ω—ã–µ —Ä–∞–π–æ–Ω—ã:*
{", ".join(selected)}

–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –∂–µ–ª–∞–µ–º—ã–π —Ü–µ–Ω–æ–≤–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω.
"""
            edit_or_send_message(bot, callback.message, text, parse_mode='Markdown')
            ask_min_price(bot, callback.message)
        return

    district = callback.data.split('_')[1]

    if district in users_data[user_id]['selected_districts']:
        users_data[user_id]['selected_districts'].remove(district)
    else:
        users_data[user_id]['selected_districts'].append(district)

    edit_or_send_message(
        bot,
        callback.message,
        "üìç –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–π–æ–Ω—ã (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ):",
        Markup.district_checkbox_markup(users_data[user_id], user_id),
        parse_mode='Markdown'
    )


def ask_min_price(bot, message):
    log_event('Entered to tenant_menu', message)
    def save_min_price(msg):
        try:
            price = int(msg.text)
            if price <= 0:
                raise ValueError
            users_data[msg.chat.id]['min_price'] = price
            ask_max_price(bot, msg)
        except ValueError:
            error_text = """
‚ùå *–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞*

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É:
‚Ä¢ –¢–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã
‚Ä¢ –ë–æ–ª—å—à–µ 0
–ü—Ä–∏–º–µ—Ä: *30000*
"""
            edit_or_send_message(bot, msg, error_text, parse_mode='Markdown')
            bot.register_next_step_handler(msg, save_min_price)

    text = """
üí∞ *–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞*

–í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å—É–º–º—É –∞—Ä–µ–Ω–¥—ã –≤ —Ä—É–±–ª—è—Ö:
–ü—Ä–∏–º–µ—Ä: *30000*
"""
    edit_or_send_message(bot, message, text, parse_mode='Markdown')
    bot.register_next_step_handler(message, save_min_price)


def ask_max_price(bot, message):
    log_event('Entered to ask_max_price', message)
    def save_max_price(msg):
        try:
            max_price = int(msg.text)
            min_price = users_data[msg.chat.id]['min_price']

            if max_price <= min_price:
                error_text = f"""
‚ö†Ô∏è *–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ {min_price}‚ÇΩ*

–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ —Å—É–º–º—É –±–æ–ª—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π:
"""
                edit_or_send_message(bot, msg, error_text, parse_mode='Markdown')
                bot.register_next_step_handler(msg, save_max_price)
                return

            users_data[msg.chat.id]['max_price'] = max_price
            save_filter(bot, msg)
        except ValueError:
            error_text = """
‚ùå *–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—É–º–º–∞*
–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É:
‚Ä¢ –¢–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã
‚Ä¢ –ë–æ–ª—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π
–ü—Ä–∏–º–µ—Ä: 60000
"""
            edit_or_send_message(bot, msg, error_text, parse_mode='Markdown')
            bot.register_next_step_handler(msg, save_max_price)

    text = f"""
üí∞ * –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞ *

–¢–µ–∫—É—â–∞—è –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: *{users_data[message.chat.id]['min_price']}‚ÇΩ *
–í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Å—É–º–º—É –∞—Ä–µ–Ω–¥—ã.
–ü—Ä–∏–º–µ—Ä: *60000*
"""
    edit_or_send_message(bot, message, text, parse_mode='Markdown')
    bot.register_next_step_handler(message, save_max_price)

def save_filter(bot, message):
    log_event('Entered to save_filter', message)
    user_id = message.chat.id
    filter_data = users_data[user_id]

    filter = Entities.Filter(
        user_id,
        filter_data['selected_districts'],
        filter_data['min_price'],
        filter_data['max_price']
    )

    db.add_filter(filter)

    success_text = f"""
üéâ * –§–∏–ª—å—Ç—Ä —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω! *

–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–∫–∞—Ç—å –∂–∏–ª—å—ë –ø–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º:
üèô *–†–∞–π–æ–Ω—ã: *{", ".join(filter.districts)}
üí∞ *–¶–µ–Ω–∞: *{filter.min_price} - {filter.max_price} ‚ÇΩ / –º–µ—Å

–ù–∞–∂–º–∏—Ç–µ
"üîç –ù–∞–π—Ç–∏ –∂–∏–ª—å—ë –ø–æ —Ñ–∏–ª—å—Ç—Ä—É" –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.
"""
    edit_or_send_message(bot, message, success_text, parse_mode='Markdown')
    tenant_menu(bot, message)

def find_by_filter(bot, callback):
    log_event('Entered to find_by_filter', callback)
    filter = db.get_filter(callback.message.chat.id)
    if filter is None:
        filter = Entities.Filter(callback.message.chat.id, Ad.ALL_DISTRICTS, 0, 1000000000)
    ads = db.find_ads_by_filter(filter)

    if not ads:
        text = """
üîé *–ü–æ–¥—Ö–æ–¥—è—â–∏—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ *

–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:
‚Ä¢ –†–∞—Å—à–∏—Ä–∏—Ç—å —Ü–µ–Ω–æ–≤–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω
‚Ä¢ –î–æ–±–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ —Ä–∞–π–æ–Ω–æ–≤
‚Ä¢ –ò–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞
"""
    else:
        text = """
üè† –ù–∞–π–¥–µ–Ω–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∂–∏–ª—å—è:
"""
        for i, ad in enumerate(ads, 1):
            text += f"""
{i}. * {ad.district}
—Ä–∞–π–æ–Ω *
üíµ *–¶–µ–Ω–∞: *{ad.price} ‚ÇΩ / –º–µ—Å
üìç *–ê–¥—Ä–µ—Å: *{ad.address}
‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
"""

    markup = Markup.go_home_markup()
    edit_or_send_message(bot, callback.message, text, markup, parse_mode='Markdown')

def go_landlord(bot, callback):
    log_event('Entered to go_landlord', callback)
    user = db.get_user(callback.message.chat.id)
    db.delete_user(user.id)

    user.role = 'landlord'
    db.add_user(user)

    Handlers.landlord.landlord_menu(bot, callback.message)

def register_tenant_handlers(bot):
    (bot.message_handler(commands=['tenant_menu'], bot=bot)
     (lambda message: tenant_menu(bot, message)))
    (bot.callback_query_handler(lambda clb: clb.data == 'create_filter')
     (lambda message: create_filter(bot, message)))
    (bot.callback_query_handler(lambda clb: clb.data.startswith("checkbox_"))
     (lambda message: checkbox_district_process(bot, message)))
    (bot.callback_query_handler(lambda clb: clb.data == 'go_landlord')
     (lambda message: go_landlord(bot, message)))
    (bot.callback_query_handler(lambda clb: clb.data == "find_by_filter")
     (lambda message: find_by_filter(bot, message)))